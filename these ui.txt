[
    {
        "id": "3039518f5882e553",
        "type": "ui-template",
        "z": "82bc7f1c679406ac",
        "group": "c222d73b24b687d1",
        "page": "",
        "ui": "",
        "name": "Multi Viewer",
        "order": 1,
        "width": 3,
        "height": 6,
        "format": "<div class=\"main-container\">\n    <div class=\"control-container\">\n        <span class=\"label-title\">Dam Units</span>\n        <div class=\"checkbox-container\">\n            <label><input type=\"checkbox\" v-model=\"showMetrics\" @change=\"toggleFilter('metrics', showMetrics)\" /> Metric</label>\n            <label><input type=\"checkbox\" v-model=\"showPackets\" @change=\"toggleFilter('packets', showPackets)\" /> Packets</label>\n            <label><input type=\"checkbox\" v-model=\"showStations\" @change=\"toggleFilter('stations', showStations)\" /> Stations</label>\n        </div>\n        <select v-model=\"selectedUnit\" @change=\"updateUnit\">\n            <option v-for=\"option in unitOptions\" :value=\"option.value\" :key=\"option.value\">{{ option.label }}</option>\n        </select>\n        <button class=\"refresh-btn\" @click=\"refreshData\">Refresh</button>\n    </div>\n    <div class=\"filter-container\">\n        <div class=\"toggle-container\">\n            <div v-if=\"showMetrics\" class=\"metrics-container\">\n                <div class=\"checkbox-columns\">\n                    <div class=\"checkbox-column\">\n                        <label><input type=\"checkbox\" v-model=\"man\" @change=\"toggleFilter('man', man)\" /> Man</label>\n                        <label><input type=\"checkbox\" v-model=\"analog\" @change=\"toggleFilter('analog', analog)\" /> Analog</label>\n                        <label><input type=\"checkbox\" v-model=\"pins\" @change=\"toggleFilter('pins', pins)\" /> Pins</label>\n                        <label><input type=\"checkbox\" v-model=\"rssi\" @change=\"toggleFilter('rssi', rssi)\" /> RSSI</label>\n                        <label><input type=\"checkbox\" v-model=\"cmd\" @change=\"toggleFilter('cmd', cmd)\" /> CMD</label>\n                        <button class=\"fetch-btn\" @click=\"fetchMetricsManual\">Refresh Metrics</button>\n                    </div>\n                    <div class=\"checkbox-column\">\n                        <label><input type=\"checkbox\" v-model=\"setup\" @change=\"toggleFilter('setup', setup)\" /> Setup</label>\n                        <label><input type=\"checkbox\" v-model=\"confirm\" @change=\"toggleFilter('confirm', confirm)\" /> Confirm</label>\n                        <label><input type=\"checkbox\" v-model=\"saved\" @change=\"toggleFilter('saved', saved)\" /> Saved</label>\n                        <label><input type=\"checkbox\" v-model=\"rebounce\" @change=\"toggleFilter('rebounce', rebounce)\" /> Rebounce</label>\n                        <label><input type=\"checkbox\" v-model=\"boot\" @change=\"toggleFilter('boot', boot)\" /> BOOT</label>\n                        <label><input type=\"checkbox\" v-model=\"non_act\" @change=\"toggleFilter('non_act', non_act)\" /> Non ACT</label>\n                    </div>\n                </div>\n                <div class=\"metrics-header\">Server Health Metrics</div>\n                <div class=\"metrics-item\">Uptime: {{ metrics.uptime }}s</div>\n                <div class=\"metrics-item\">Primary Buffer: {{ metrics.primaryBufferCount }} / {{ metrics.bufferMax }}</div>\n                <div class=\"metrics-item\">Secondary Buffer: {{ metrics.secondaryBufferCount }} / {{ metrics.bufferMax }}</div>\n                <div class=\"metrics-item\">Publish Buffer: {{ metrics.publishBufferCount }} / {{ metrics.bufferMax }}</div>\n            </div>\n            <div v-if=\"showPackets\" class=\"packets-container\">\n                <div class=\"metrics-header\">Packet Data</div>\n                <div class=\"metrics-item\">Total Packets: {{ metrics.totalPackets }}</div>\n                <div class=\"metrics-item\">Unit Bad Packets: {{ metrics.unitBadPackets }}</div>\n                <div class=\"metrics-item\">Gene Bad Packets: {{ metrics.geneBadPackets }}</div>\n                <div class=\"metrics-item\">WiFi Strength: {{ metrics.wifiStrength }} dBm</div>\n                <div class=\"metrics-item\">LoRa Status: {{ metrics.loraStatus }}</div>\n            </div>\n            <div v-if=\"showStations\" class=\"labels-container\">\n                <div class=\"label-header\">Last Seen</div>\n                <div v-for=\"(label, index) in labels\" :key=\"index\" :class=\"{'label-old': isOld(label.lastUpdate)}\" class=\"label-item\">\n                    <span class=\"label-name\">{{ label.name }}</span>\n                    <span class=\"label-time\">{{ label.lastUpdate }}</span>\n                </div>\n            </div>\n        </div>\n        <div v-if=\"showPackets\" class=\"list-box\" v-html=\"displayData\"></div>\n    </div>\n</div>\n\n<style>\n    .main-container {\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        align-self: start; /* Prevent stretching to fill grid cell */\n    }\n    .control-container {\n        padding: 10px;\n        background: #333;\n        border-radius: 15px;\n        box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.8), inset -5px -5px 15px rgba(255, 255, 255, 0.1);\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n        align-items: center;\n        margin-bottom: 10px;\n    }\n    .label-title {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    select {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 8px;\n        padding: 5px;\n        font-size: 14px;\n        width: 150px;\n    }\n    .checkbox-container {\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n    }\n    .checkbox-container label {\n        color: #fff;\n        font-size: 14px;\n        display: flex;\n        align-items: center;\n    }\n    .checkbox-container input[type=\"checkbox\"] {\n        margin-right: 5px;\n        accent-color: #2a2a2a;\n    }\n    .refresh-btn {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 22px;\n        padding: 5px 15px;\n        font-size: 14px;\n        cursor: pointer;\n        box-shadow: -2px -2px 5px rgba(255, 255, 255, 0.1), 2px 2px 5px rgba(0, 0, 0, 0.7);\n        margin-left: auto;\n    }\n    .refresh-btn:active {\n        transform: translateY(2px);\n    }\n    .fetch-btn {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 8px;\n        padding: 5px 10px;\n        font-size: 14px;\n        cursor: pointer;\n        box-shadow: -2px -2px 5px rgba(255, 255, 255, 0.1), 2px 2px 5px rgba(0, 0, 0, 0.7);\n        margin-top: 5px;\n        text-align: center;\n    }\n    .fetch-btn:active {\n        transform: translateY(2px);\n    }\n    .filter-container {\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n        background: #333;\n        padding: 10px;\n        border-radius: 15px;\n        box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.8), inset -5px -5px 15px rgba(255, 255, 255, 0.1);\n    }\n    .toggle-container {\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        width: 50%;\n    }\n    .checkbox-columns {\n        display: flex;\n        flex-direction: row;\n        gap: 15px;\n    }\n    .checkbox-column {\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n        width: 50%;\n    }\n    .checkbox-column label {\n        color: #fff;\n        font-size: 14px;\n    }\n    .checkbox-column input[type=\"checkbox\"] {\n        margin-right: 5px;\n        accent-color: #2a2a2a;\n    }\n    .metrics-container, .packets-container, .labels-container {\n        padding: 5px;\n        background: #3a3a3a;\n        border-radius: 8px;\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n    }\n    .metrics-header {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    .metrics-item {\n        color: #fff;\n        font-size: 14px;\n    }\n    .label-header {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    .label-item {\n        display: flex;\n        justify-content: space-between;\n        font-size: 14px;\n    }\n    .label-name, .label-time {\n        color: #fff;\n    }\n    .label-old .label-name, .label-old .label-time {\n        color: #ff9900;\n    }\n    .list-box {\n        background: #2a2a2a;\n        border-radius: 8px;\n        padding: 10px;\n        width: 50%;\n        overflow-y: auto;\n        box-shadow: inset 2px 2px 5px rgba(0, 0, 0, 0.5), inset -2px -2px 5px rgba(255, 255, 255, 0.05);\n        font-size: 14px;\n        font-weight: bold;\n        color: #fff;\n        text-align: left;\n    }\n    .list-box ul {\n        list-style-type: none;\n        padding: 0;\n        margin: 0;\n    }\n    .list-box li {\n        padding: 5px 0;\n    }\n    .list-box li li {\n        padding-left: 20px;\n        color: #e6e600;\n    }\n</style>\n\n<script>\nexport default {\n    data() {\n        return {\n            selectedUnit: 'See All',\n            unitOptions: [{'label': 'See All', 'value': 'See All'}],\n            showMetrics: false,\n            showPackets: false,\n            showStations: false,\n            man: false,\n            analog: false,\n            pins: false,\n            rssi: false,\n            cmd: false,\n            setup: false,\n            confirm: false,\n            saved: false,\n            rebounce: false,\n            boot: false,\n            non_act: false,\n            displayData: 'No data yet',\n            labels: [],\n            metrics: {\n                uptime: 0,\n                primaryBufferCount: 0,\n                secondaryBufferCount: 0,\n                publishBufferCount: 0,\n                bufferMax: 75,\n                totalPackets: 0,\n                unitBadPackets: 0,\n                geneBadPackets: 0,\n                wifiStrength: 0,\n                loraStatus: 'Unknown'\n            }\n        }\n    },\n    watch: {\n        msg: {\n            handler(newMsg) {\n                if (newMsg && newMsg.topic && newMsg.payload !== undefined) {\n                    switch (newMsg.topic) {\n                        case 'dropload':\n                            if (Array.isArray(newMsg.payload)) {\n                                this.unitOptions = newMsg.payload;\n                                if (!this.unitOptions.some(opt => opt.value === this.selectedUnit)) {\n                                    this.selectedUnit = 'See All';\n                                }\n                            }\n                            break;\n                        case 'man':\n                            this.man = newMsg.payload;\n                            break;\n                        case 'analog':\n                            this.analog = newMsg.payload;\n                            break;\n                        case 'pins':\n                            this.pins = newMsg.payload;\n                            break;\n                        case 'rssi':\n                            this.rssi = newMsg.payload;\n                            break;\n                        case 'cmd':\n                            this.cmd = newMsg.payload;\n                            break;\n                        case 'setup':\n                            this.setup = newMsg.payload;\n                            break;\n                        case 'confirm':\n                            this.confirm = newMsg.payload;\n                            break;\n                        case 'saved':\n                            this.saved = newMsg.payload;\n                            break;\n                        case 'rebounce':\n                            this.rebounce = newMsg.payload;\n                            break;\n                        case 'boot':\n                            this.boot = newMsg.payload;\n                            break;\n                        case 'non_act':\n                            this.non_act = newMsg.payload;\n                            break;\n                        case 'fetch':\n                            this.updateMetrics(newMsg.payload);\n                            break;\n                        case 'metrics':\n                            if (typeof newMsg.payload === 'boolean') {\n                                this.showMetrics = newMsg.payload;\n                            }\n                            break;\n                        case 'packets':\n                            this.showPackets = newMsg.payload;\n                            break;\n                        case 'stations':\n                            this.showStations = newMsg.payload;\n                            break;\n                        case 'listload':\n                            this.displayData = newMsg.payload;\n                            break;\n                        case 'labelsload':\n                            if (Array.isArray(newMsg.payload)) {\n                                this.labels = newMsg.payload;\n                                this.showStations = this.labels.some(label => this.isOld(label.lastUpdate)) || this.showStations;\n                            }\n                            break;\n                    }\n                }\n            },\n            deep: true\n        }\n    },\n    methods: {\n        updateUnit() {\n            this.send({ payload: this.selectedUnit, topic: 'unit_select' });\n        },\n        refreshData() {\n            this.send({ payload: 'refresh', topic: 'refresh' });\n        },\n        toggleFilter(topic, value) {\n            this.send({ payload: value, topic: topic });\n        },\n        fetchMetricsManual() {\n            this.send({ payload: 'metrics', topic: 'fetch' });\n        },\n        isOld(lastUpdate) {\n            if (!lastUpdate) return false;\n            const now = new Date();\n            const last = new Date(lastUpdate.replace(/(\\d{2})\\/(\\d{2}) : (\\d{2}):(\\d{2})/, '2025-$1-$2T$3:$4:00'));\n            const diffMs = now - last;\n            return diffMs > 60 * 60 * 1000;\n        },\n        updateMetrics(payload) {\n            if (typeof payload === 'string') {\n                const lines = payload.split('\\n').map(line => line.trim());\n                lines.forEach(line => {\n                    if (line.startsWith('Uptime')) this.metrics.uptime = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Primary Buffer')) {\n                        const [count, max] = line.split(': ')[1].split(' / ');\n                        this.metrics.primaryBufferCount = parseInt(count) || 0;\n                        this.metrics.bufferMax = parseInt(max) || 75;\n                    }\n                    else if (line.startsWith('Secondary Buffer')) {\n                        const [count] = line.split(': ')[1].split(' / ');\n                        this.metrics.secondaryBufferCount = parseInt(count) || 0;\n                    }\n                    else if (line.startsWith('Publish Buffer')) {\n                        const [count] = line.split(': ')[1].split(' / ');\n                        this.metrics.publishBufferCount = parseInt(count) || 0;\n                    }\n                    else if (line.startsWith('Total Packets')) this.metrics.totalPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Unit Bad Packets')) this.metrics.unitBadPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Gene Bad Packets')) this.metrics.geneBadPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('WiFi Strength')) this.metrics.wifiStrength = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('LoRa Status')) this.metrics.loraStatus = line.split(': ')[1] || 'Unknown';\n                });\n            }\n        }\n    },\n    mounted() {\n        console.log('LyreBird Filter Control mounted');\n    }\n}\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "ab857977579c9d5e",
        "type": "ui-template",
        "z": "82bc7f1c679406ac",
        "group": "0ba568e314e2ccc8",
        "page": "",
        "ui": "",
        "name": "Show receive tower",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<div class=\"main-container\">\n    <div class=\"control-container\">\n        <span class=\"label-title\">Dam Units</span>\n        <div class=\"checkbox-container\">\n            <label><input type=\"checkbox\" v-model=\"showMetrics\" @change=\"toggleFilter('metrics', showMetrics)\" /> Metric</label>\n            <label><input type=\"checkbox\" v-model=\"showPackets\" @change=\"toggleFilter('packets', showPackets)\" /> Packets</label>\n            <label><input type=\"checkbox\" v-model=\"showStations\" @change=\"toggleFilter('stations', showStations)\" /> Stations</label>\n        </div>\n        <select v-model=\"selectedUnit\" @change=\"updateUnit\">\n            <option v-for=\"option in unitOptions\" :value=\"option.value\" :key=\"option.value\">{{ option.label }}</option>\n        </select>\n        <button class=\"refresh-btn\" @click=\"refreshData\">Refresh</button>\n    </div>\n    <div class=\"filter-container\">\n        <div class=\"toggle-container\">\n            <div v-if=\"showMetrics\" class=\"metrics-container\">\n                <div class=\"checkbox-columns\">\n                    <div class=\"checkbox-column\">\n                        <label><input type=\"checkbox\" v-model=\"man\" @change=\"toggleFilter('man', man)\" /> Man</label>\n                        <label><input type=\"checkbox\" v-model=\"analog\" @change=\"toggleFilter('analog', analog)\" /> Analog</label>\n                        <label><input type=\"checkbox\" v-model=\"pins\" @change=\"toggleFilter('pins', pins)\" /> Pins</label>\n                        <label><input type=\"checkbox\" v-model=\"rssi\" @change=\"toggleFilter('rssi', rssi)\" /> RSSI</label>\n                        <label><input type=\"checkbox\" v-model=\"cmd\" @change=\"toggleFilter('cmd', cmd)\" /> CMD</label>\n                        <button class=\"fetch-btn\" @click=\"fetchMetricsManual\">Refresh Metrics</button>\n                    </div>\n                    <div class=\"checkbox-column\">\n                        <label><input type=\"checkbox\" v-model=\"setup\" @change=\"toggleFilter('setup', setup)\" /> Setup</label>\n                        <label><input type=\"checkbox\" v-model=\"confirm\" @change=\"toggleFilter('confirm', confirm)\" /> Confirm</label>\n                        <label><input type=\"checkbox\" v-model=\"saved\" @change=\"toggleFilter('saved', saved)\" /> Saved</label>\n                        <label><input type=\"checkbox\" v-model=\"rebounce\" @change=\"toggleFilter('rebounce', rebounce)\" /> Rebounce</label>\n                        <label><input type=\"checkbox\" v-model=\"boot\" @change=\"toggleFilter('boot', boot)\" /> BOOT</label>\n                        <label><input type=\"checkbox\" v-model=\"non_act\" @change=\"toggleFilter('non_act', non_act)\" /> Non ACT</label>\n                    </div>\n                </div>\n                <div class=\"metrics-header\">Server Health Metrics</div>\n                <div class=\"metrics-item\">Uptime: {{ metrics.uptime }}s</div>\n                <div class=\"metrics-item\">Primary Buffer: {{ metrics.primaryBufferCount }} / {{ metrics.bufferMax }}</div>\n                <div class=\"metrics-item\">Secondary Buffer: {{ metrics.secondaryBufferCount }} / {{ metrics.bufferMax }}</div>\n                <div class=\"metrics-item\">Publish Buffer: {{ metrics.publishBufferCount }} / {{ metrics.bufferMax }}</div>\n            </div>\n            <div v-if=\"showPackets\" class=\"packets-container\">\n                <div class=\"metrics-header\">Packet Data</div>\n                <div class=\"metrics-item\">Total Packets: {{ metrics.totalPackets }}</div>\n                <div class=\"metrics-item\">Unit Bad Packets: {{ metrics.unitBadPackets }}</div>\n                <div class=\"metrics-item\">Gene Bad Packets: {{ metrics.geneBadPackets }}</div>\n                <div class=\"metrics-item\">WiFi Strength: {{ metrics.wifiStrength }} dBm</div>\n                <div class=\"metrics-item\">LoRa Status: {{ metrics.loraStatus }}</div>\n            </div>\n            <div v-if=\"showStations\" class=\"labels-container\">\n                <div class=\"label-header\">Last Seen</div>\n                <div v-for=\"(label, index) in labels\" :key=\"index\" :class=\"{'label-old': isOld(label.lastUpdate)}\" class=\"label-item\">\n                    <span class=\"label-name\">{{ label.name }}</span>\n                    <span class=\"label-time\">{{ label.lastUpdate }}</span>\n                </div>\n            </div>\n        </div>\n        <div v-if=\"showPackets\" class=\"list-box\" v-html=\"displayData\"></div>\n    </div>\n</div>\n\n<style>\n    .main-container {\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        align-self: start; /* Prevent stretching to fill grid cell */\n    }\n    .control-container {\n        padding: 10px;\n        background: #333;\n        border-radius: 15px;\n        box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.8), inset -5px -5px 15px rgba(255, 255, 255, 0.1);\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n        align-items: center;\n        margin-bottom: 10px;\n    }\n    .label-title {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    select {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 8px;\n        padding: 5px;\n        font-size: 14px;\n        width: 150px;\n    }\n    .checkbox-container {\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n    }\n    .checkbox-container label {\n        color: #fff;\n        font-size: 14px;\n        display: flex;\n        align-items: center;\n    }\n    .checkbox-container input[type=\"checkbox\"] {\n        margin-right: 5px;\n        accent-color: #2a2a2a;\n    }\n    .refresh-btn {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 22px;\n        padding: 5px 15px;\n        font-size: 14px;\n        cursor: pointer;\n        box-shadow: -2px -2px 5px rgba(255, 255, 255, 0.1), 2px 2px 5px rgba(0, 0, 0, 0.7);\n        margin-left: auto;\n    }\n    .refresh-btn:active {\n        transform: translateY(2px);\n    }\n    .fetch-btn {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 8px;\n        padding: 5px 10px;\n        font-size: 14px;\n        cursor: pointer;\n        box-shadow: -2px -2px 5px rgba(255, 255, 255, 0.1), 2px 2px 5px rgba(0, 0, 0, 0.7);\n        margin-top: 5px;\n        text-align: center;\n    }\n    .fetch-btn:active {\n        transform: translateY(2px);\n    }\n    .filter-container {\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n        background: #333;\n        padding: 10px;\n        border-radius: 15px;\n        box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.8), inset -5px -5px 15px rgba(255, 255, 255, 0.1);\n    }\n    .toggle-container {\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        width: 50%;\n    }\n    .checkbox-columns {\n        display: flex;\n        flex-direction: row;\n        gap: 15px;\n    }\n    .checkbox-column {\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n        width: 50%;\n    }\n    .checkbox-column label {\n        color: #fff;\n        font-size: 14px;\n    }\n    .checkbox-column input[type=\"checkbox\"] {\n        margin-right: 5px;\n        accent-color: #2a2a2a;\n    }\n    .metrics-container, .packets-container, .labels-container {\n        padding: 5px;\n        background: #3a3a3a;\n        border-radius: 8px;\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n    }\n    .metrics-header {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    .metrics-item {\n        color: #fff;\n        font-size: 14px;\n    }\n    .label-header {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    .label-item {\n        display: flex;\n        justify-content: space-between;\n        font-size: 14px;\n    }\n    .label-name, .label-time {\n        color: #fff;\n    }\n    .label-old .label-name, .label-old .label-time {\n        color: #ff9900;\n    }\n    .list-box {\n        background: #2a2a2a;\n        border-radius: 8px;\n        padding: 10px;\n        width: 50%;\n        overflow-y: auto;\n        box-shadow: inset 2px 2px 5px rgba(0, 0, 0, 0.5), inset -2px -2px 5px rgba(255, 255, 255, 0.05);\n        font-size: 14px;\n        font-weight: bold;\n        color: #fff;\n        text-align: left;\n    }\n    .list-box ul {\n        list-style-type: none;\n        padding: 0;\n        margin: 0;\n    }\n    .list-box li {\n        padding: 5px 0;\n    }\n    .list-box li li {\n        padding-left: 20px;\n        color: #e6e600;\n    }\n</style>\n\n<script>\nexport default {\n    data() {\n        return {\n            selectedUnit: 'See All',\n            unitOptions: [{'label': 'See All', 'value': 'See All'}],\n            showMetrics: false,\n            showPackets: false,\n            showStations: false,\n            man: false,\n            analog: false,\n            pins: false,\n            rssi: false,\n            cmd: false,\n            setup: false,\n            confirm: false,\n            saved: false,\n            rebounce: false,\n            boot: false,\n            non_act: false,\n            displayData: 'No data yet',\n            labels: [],\n            metrics: {\n                uptime: 0,\n                primaryBufferCount: 0,\n                secondaryBufferCount: 0,\n                publishBufferCount: 0,\n                bufferMax: 75,\n                totalPackets: 0,\n                unitBadPackets: 0,\n                geneBadPackets: 0,\n                wifiStrength: 0,\n                loraStatus: 'Unknown'\n            }\n        }\n    },\n    watch: {\n        msg: {\n            handler(newMsg) {\n                if (newMsg && newMsg.topic && newMsg.payload !== undefined) {\n                    switch (newMsg.topic) {\n                        case 'dropload':\n                            if (Array.isArray(newMsg.payload)) {\n                                this.unitOptions = newMsg.payload;\n                                if (!this.unitOptions.some(opt => opt.value === this.selectedUnit)) {\n                                    this.selectedUnit = 'See All';\n                                }\n                            }\n                            break;\n                        case 'man':\n                            this.man = newMsg.payload;\n                            break;\n                        case 'analog':\n                            this.analog = newMsg.payload;\n                            break;\n                        case 'pins':\n                            this.pins = newMsg.payload;\n                            break;\n                        case 'rssi':\n                            this.rssi = newMsg.payload;\n                            break;\n                        case 'cmd':\n                            this.cmd = newMsg.payload;\n                            break;\n                        case 'setup':\n                            this.setup = newMsg.payload;\n                            break;\n                        case 'confirm':\n                            this.confirm = newMsg.payload;\n                            break;\n                        case 'saved':\n                            this.saved = newMsg.payload;\n                            break;\n                        case 'rebounce':\n                            this.rebounce = newMsg.payload;\n                            break;\n                        case 'boot':\n                            this.boot = newMsg.payload;\n                            break;\n                        case 'non_act':\n                            this.non_act = newMsg.payload;\n                            break;\n                        case 'fetch':\n                            this.updateMetrics(newMsg.payload);\n                            break;\n                        case 'metrics':\n                            if (typeof newMsg.payload === 'boolean') {\n                                this.showMetrics = newMsg.payload;\n                            }\n                            break;\n                        case 'packets':\n                            this.showPackets = newMsg.payload;\n                            break;\n                        case 'stations':\n                            this.showStations = newMsg.payload;\n                            break;\n                        case 'listload':\n                            this.displayData = newMsg.payload;\n                            break;\n                        case 'labelsload':\n                            if (Array.isArray(newMsg.payload)) {\n                                this.labels = newMsg.payload;\n                                this.showStations = this.labels.some(label => this.isOld(label.lastUpdate)) || this.showStations;\n                            }\n                            break;\n                    }\n                }\n            },\n            deep: true\n        }\n    },\n    methods: {\n        updateUnit() {\n            this.send({ payload: this.selectedUnit, topic: 'unit_select' });\n        },\n        refreshData() {\n            this.send({ payload: 'refresh', topic: 'refresh' });\n        },\n        toggleFilter(topic, value) {\n            this.send({ payload: value, topic: topic });\n        },\n        fetchMetricsManual() {\n            this.send({ payload: 'metrics', topic: 'fetch' });\n        },\n        isOld(lastUpdate) {\n            if (!lastUpdate) return false;\n            const now = new Date();\n            const last = new Date(lastUpdate.replace(/(\\d{2})\\/(\\d{2}) : (\\d{2}):(\\d{2})/, '2025-$1-$2T$3:$4:00'));\n            const diffMs = now - last;\n            return diffMs > 60 * 60 * 1000;\n        },\n        updateMetrics(payload) {\n            if (typeof payload === 'string') {\n                const lines = payload.split('\\n').map(line => line.trim());\n                lines.forEach(line => {\n                    if (line.startsWith('Uptime')) this.metrics.uptime = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Primary Buffer')) {\n                        const [count, max] = line.split(': ')[1].split(' / ');\n                        this.metrics.primaryBufferCount = parseInt(count) || 0;\n                        this.metrics.bufferMax = parseInt(max) || 75;\n                    }\n                    else if (line.startsWith('Secondary Buffer')) {\n                        const [count] = line.split(': ')[1].split(' / ');\n                        this.metrics.secondaryBufferCount = parseInt(count) || 0;\n                    }\n                    else if (line.startsWith('Publish Buffer')) {\n                        const [count] = line.split(': ')[1].split(' / ');\n                        this.metrics.publishBufferCount = parseInt(count) || 0;\n                    }\n                    else if (line.startsWith('Total Packets')) this.metrics.totalPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Unit Bad Packets')) this.metrics.unitBadPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Gene Bad Packets')) this.metrics.geneBadPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('WiFi Strength')) this.metrics.wifiStrength = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('LoRa Status')) this.metrics.loraStatus = line.split(': ')[1] || 'Unknown';\n                });\n            }\n        }\n    },\n    mounted() {\n        console.log('LyreBird Filter Control mounted');\n    }\n}\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "c830e538d1a55e26",
        "type": "ui-template",
        "z": "82bc7f1c679406ac",
        "group": "0ba568e314e2ccc8",
        "page": "",
        "ui": "",
        "name": "Show paraffin server",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<div class=\"main-container\">\n    <div class=\"control-container\">\n        <span class=\"label-title\">Paraffin Tanks</span>\n        <div class=\"checkbox-container\">\n            <label><input type=\"checkbox\" v-model=\"showMetrics\" @change=\"toggleFilter('metrics', showMetrics)\" /> Metric</label>\n            <label><input type=\"checkbox\" v-model=\"showPackets\" @change=\"toggleFilter('packets', showPackets)\" /> Packets</label>\n            <label><input type=\"checkbox\" v-model=\"showStations\" @change=\"toggleFilter('stations', showStations)\" /> Stations</label>\n        </div>\n        <select v-model=\"selectedPar\" @change=\"updatePar\">\n            <option v-for=\"option in parOptions\" :value=\"option.value\" :key=\"option.value\">{{ option.label }}</option>\n        </select>\n        <button class=\"refresh-btn\" @click=\"refreshData\">Refresh</button>\n    </div>\n    <div class=\"filter-container\">\n        <div class=\"toggle-container\">\n            <div v-if=\"showMetrics\" class=\"metrics-container\">\n                <div class=\"checkbox-columns\">\n                    <div class=\"checkbox-column\">\n                        <label><input type=\"checkbox\" v-model=\"man\" @change=\"toggleFilter('man', man)\" /> Man</label>\n                        <label><input type=\"checkbox\" v-model=\"analog\" @change=\"toggleFilter('analog', analog)\" /> Analog</label>\n                        <label><input type=\"checkbox\" v-model=\"pins\" @change=\"toggleFilter('pins', pins)\" /> Pins</label>\n                        <label><input type=\"checkbox\" v-model=\"rssi\" @change=\"toggleFilter('rssi', rssi)\" /> RSSI</label>\n                        <label><input type=\"checkbox\" v-model=\"cmd\" @change=\"toggleFilter('cmd', cmd)\" /> CMD</label>\n                        <button class=\"fetch-btn\" @click=\"fetchMetricsManual\">Refresh Metrics</button>\n                    </div>\n                    <div class=\"checkbox-column\">\n                        <label><input type=\"checkbox\" v-model=\"setup\" @change=\"toggleFilter('setup', setup)\" /> Setup</label>\n                        <label><input type=\"checkbox\" v-model=\"confirm\" @change=\"toggleFilter('confirm', confirm)\" /> Confirm</label>\n                        <label><input type=\"checkbox\" v-model=\"saved\" @change=\"toggleFilter('saved', saved)\" /> Saved</label>\n                        <label><input type=\"checkbox\" v-model=\"rebounce\" @change=\"toggleFilter('rebounce', rebounce)\" /> Rebounce</label>\n                        <label><input type=\"checkbox\" v-model=\"boot\" @change=\"toggleFilter('boot', boot)\" /> BOOT</label>\n                        <label><input type=\"checkbox\" v-model=\"non_act\" @change=\"toggleFilter('non_act', non_act)\" /> Non ACT</label>\n                    </div>\n                </div>\n                <div class=\"metrics-header\">Server Health Metrics</div>\n                <div class=\"metrics-item\">Uptime: {{ metrics.uptime }}s</div>\n                <div class=\"metrics-item\">Primary Buffer: {{ metrics.primaryBufferCount }} / {{ metrics.bufferMax }}</div>\n                <div class=\"metrics-item\">Publish Buffer: {{ metrics.publishBufferCount }} / {{ metrics.bufferMax }}</div>\n            </div>\n            <div v-if=\"showPackets\" class=\"packets-container\">\n                <div class=\"metrics-header\">Packet Data</div>\n                <div class=\"metrics-item\">Total Packets: {{ metrics.totalPackets }}</div>\n                <div class=\"metrics-item\">Bad PAR Packets: {{ metrics.parBadPackets }}</div>\n                <div class=\"metrics-item\">WiFi Strength: {{ metrics.wifiStrength }} dBm</div>\n                <div class=\"metrics-item\">LoRa Status: {{ metrics.loraStatus }}</div>\n            </div>\n            <div v-if=\"showStations\" class=\"labels-container\">\n                <div class=\"label-header\">Last Seen</div>\n                <div v-for=\"(label, index) in labels\" :key=\"index\" :class=\"{'label-old': isOld(label.lastUpdate)}\" class=\"label-item\">\n                    <span class=\"label-name\">{{ label.name }}</span>\n                    <span class=\"label-time\">{{ label.lastUpdate }}</span>\n                </div>\n            </div>\n        </div>\n        <div v-if=\"showPackets\" class=\"list-box\" v-html=\"displayData\"></div>\n    </div>\n</div>\n\n<style>\n    .main-container {\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        align-self: start;\n    }\n    .control-container {\n        padding: 10px;\n        background: #333;\n        border-radius: 15px;\n        box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.8), inset -5px -5px 15px rgba(255, 255, 255, 0.1);\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n        align-items: center;\n        margin-bottom: 10px;\n    }\n    .label-title {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    .checkbox-container {\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n    }\n    .checkbox-container label {\n        color: #fff;\n        font-size: 14px;\n        display: flex;\n        align-items: center;\n    }\n    .checkbox-container input[type=\"checkbox\"] {\n        margin-right: 5px;\n        accent-color: #2a2a2a;\n    }\n    .refresh-btn {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 22px;\n        padding: 5px 15px;\n        font-size: 14px;\n        cursor: pointer;\n        box-shadow: -2px -2px 5px rgba(255, 255, 255, 0.1), 2px 2px 5px rgba(0, 0, 0, 0.7);\n        margin-left: auto;\n    }\n    .refresh-btn:active {\n        transform: translateY(2px);\n    }\n    .fetch-btn {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 8px;\n        padding: 5px 10px;\n        font-size: 14px;\n        cursor: pointer;\n        box-shadow: -2px -2px 5px rgba(255, 255, 255, 0.1), 2px 2px 5px rgba(0, 0, 0, 0.7);\n        margin-top: 5px;\n        text-align: center;\n    }\n    .fetch-btn:active {\n        transform: translateY(2px);\n    }\n    .filter-container {\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n        background: #333;\n        padding: 10px;\n        border-radius: 15px;\n        box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.8), inset -5px -5px 15px rgba(255, 255, 255, 0.1);\n    }\n    .toggle-container {\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        width: 50%;\n    }\n    .checkbox-columns {\n        display: flex;\n        flex-direction: row;\n        gap: 15px;\n    }\n    .checkbox-column {\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n        width: 50%;\n    }\n    .checkbox-column label {\n        color: #fff;\n        font-size: 14px;\n    }\n    .checkbox-column input[type=\"checkbox\"] {\n        margin-right: 5px;\n        accent-color: #2a2a2a;\n    }\n    .metrics-container, .packets-container, .labels-container {\n        padding: 5px;\n        background: #3a3a3a;\n        border-radius: 8px;\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n    }\n    .metrics-header {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    .metrics-item {\n        color: #fff;\n        font-size: 14px;\n    }\n    .label-header {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    .label-item {\n        display: flex;\n        justify-content: space-between;\n        font-size: 14px;\n    }\n    .label-name, .label-time {\n        color: #fff;\n    }\n    .label-old .label-name, .label-old .label-time {\n        color: #ff9900;\n    }\n    .list-box {\n        background: #2a2a2a;\n        border-radius: 8px;\n        padding: 10px;\n        width: 50%;\n        overflow-y: auto;\n        box-shadow: inset 2px 2px 5px rgba(0, 0, 0, 0.5), inset -2px -2px 5px rgba(255, 255, 255, 0.05);\n        font-size: 14px;\n        font-weight: bold;\n        color: #fff;\n        text-align: left;\n    }\n    .list-box ul {\n        list-style-type: none;\n        padding: 0;\n        margin: 0;\n    }\n    .list-box li {\n        padding: 5px 0;\n    }\n    .list-box li li {\n        padding-left: 20px;\n        color: #e6e600;\n    }\n</style>\n\n<script>\nexport default {\n    data() {\n        return {\n            selectedPar: 'See All',\n            parOptions: [{'label': 'See All', 'value': 'See All'}],\n            showMetrics: false,\n            showPackets: true,\n            showStations: false,\n            man: false,\n            analog: true,\n            pins: true,\n            rssi: false,\n            cmd: false,\n            setup: false,\n            confirm: false,\n            saved: false,\n            rebounce: false,\n            boot: false,\n            non_act: false,\n            displayData: 'No data yet',\n            labels: [],\n            metrics: {\n                uptime: 0,\n                primaryBufferCount: 0,\n                publishBufferCount: 0,\n                bufferMax: 50,\n                totalPackets: 0,\n                parBadPackets: 0,\n                wifiStrength: 0,\n                loraStatus: 'Unknown'\n            }\n        }\n    },\n    watch: {\n        msg: {\n            handler(newMsg) {\n                console.log('Received msg: ' + JSON.stringify(newMsg));\n                if (newMsg && newMsg.topic && newMsg.payload !== undefined) {\n                    switch (newMsg.topic) {\n                        case 'dropload':\n                            if (Array.isArray(newMsg.payload)) {\n                                this.parOptions = newMsg.payload;\n                                if (!this.parOptions.some(opt => opt.value === this.selectedPar)) {\n                                    this.selectedPar = 'See All';\n                                }\n                            }\n                            break;\n                        case 'listload':\n                            console.log('listload payload: ' + newMsg.payload);\n                            this.displayData = newMsg.payload;\n                            this.showPackets = true;\n                            break;\n                        case 'labelsload':\n                            if (Array.isArray(newMsg.payload)) {\n                                this.labels = newMsg.payload;\n                                this.showStations = this.labels.some(label => this.isOld(label.lastUpdate)) || this.showStations;\n                            }\n                            break;\n                        case 'fetch':\n                            this.updateMetrics(newMsg.payload);\n                            break;\n                        case 'metrics':\n                            this.showMetrics = true;\n                            this.updateMetrics(newMsg.payload);\n                            break;\n                        case 'stations':\n                            this.showStations = newMsg.payload;\n                            break;\n                    }\n                }\n            },\n            deep: true\n        }\n    },\n    methods: {\n        updatePar() {\n            console.log('Sending par_select: ' + this.selectedPar);\n            this.send({ payload: this.selectedPar, topic: 'par_select' });\n        },\n        refreshData() {\n            console.log('Sending refresh');\n            this.send({ payload: 'refresh', topic: 'refresh' });\n        },\n        toggleFilter(topic, value) {\n            console.log('Sending toggleFilter: ' + topic + ', ' + value);\n            this.send({ payload: value, topic: topic });\n            if (topic !== 'metrics' && topic !== 'stations') {\n                this.updateView();\n            }\n        },\n        fetchMetricsManual() {\n            console.log('Sending fetchMetricsManual');\n            this.send({ payload: 'metrics', topic: 'fetch' });\n        },\n        isOld(lastUpdate) {\n            if (!lastUpdate) return false;\n            const now = new Date();\n            const last = new Date(lastUpdate.replace(/(\\d{2})\\/(\\d{2}) : (\\d{2}):(\\d{2})/, '2025-$1-$2T$3:$4:00'));\n            const diffMs = now - last;\n            return diffMs > 60 * 60 * 1000;\n        },\n        updateMetrics(payload) {\n            if (typeof payload === 'string') {\n                const lines = payload.split('\\n').map(line => line.trim());\n                lines.forEach(line => {\n                    if (line.startsWith('Uptime')) this.metrics.uptime = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Primary Buffer')) {\n                        const [count, max] = line.split(': ')[1].split(' / ');\n                        this.metrics.primaryBufferCount = parseInt(count) || 0;\n                        this.metrics.bufferMax = parseInt(max) || 50;\n                    }\n                    else if (line.startsWith('Publish Buffer')) {\n                        const [count] = line.split(': ')[1].split(' / ');\n                        this.metrics.publishBufferCount = parseInt(count) || 0;\n                    }\n                    else if (line.startsWith('Total Packets')) this.metrics.totalPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Bad Packets')) this.metrics.parBadPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('WiFi Strength')) this.metrics.wifiStrength = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('LoRa Status')) this.metrics.loraStatus = line.split(': ')[1] || 'Unknown';\n                });\n            }\n        },\n        updateView() {\n            const view = [\n                this.selectedPar === 'See All' ? '00' : this.selectedPar.slice(-2),\n                this.man ? '1' : '0',\n                this.analog ? '1' : '0',\n                this.pins ? '1' : '0',\n                this.rssi ? '1' : '0',\n                this.pins ? '1' : '0',\n                '0',\n                '0',\n                this.cmd ? '1' : '0',\n                this.rebounce ? '1' : '0',\n                this.confirm ? '1' : '0',\n                this.setup ? '1' : '0',\n                this.boot ? '1' : '0',\n                this.non_act ? '1' : '0',\n                this.non_act ? '1' : '0'\n            ].join(',');\n            console.log('Sending ViewP: ' + view);\n            this.send({ payload: view, topic: 'view' });\n        }\n    },\n    mounted() {\n        console.log('Paraffin Tank Filter Control mounted');\n        this.updateView();\n    }\n}\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "f547909a19e0f788",
        "type": "ui-template",
        "z": "82bc7f1c679406ac",
        "group": "0ba568e314e2ccc8",
        "page": "",
        "ui": "",
        "name": "Show gen server",
        "order": 2,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<div class=\"main-container\">\n    <div class=\"control-container\">\n        <span class=\"label-title\">Gen Units</span>\n        <div class=\"checkbox-container\">\n            <label><input type=\"checkbox\" v-model=\"showMetrics\" @change=\"toggleFilter('metrics', showMetrics)\" /> Metric</label>\n            <label><input type=\"checkbox\" v-model=\"showPackets\" @change=\"toggleFilter('packets', showPackets)\" /> Packets</label>\n            <label><input type=\"checkbox\" v-model=\"showStations\" @change=\"toggleFilter('stations', showStations)\" /> Stations</label>\n        </div>\n        <select v-model=\"selectedUnit\" @change=\"updateUnit\">\n            <option v-for=\"option in unitOptions\" :value=\"option.value\" :key=\"option.value\">{{ option.label }}</option>\n        </select>\n        <button class=\"refresh-btn\" @click=\"refreshData\">Refresh</button>\n    </div>\n    <div class=\"filter-container\">\n        <div class=\"toggle-container\">\n            <div v-if=\"showMetrics\" class=\"metrics-container\">\n                <div class=\"checkbox-columns\">\n                    <div class=\"checkbox-column\">\n                        <label><input type=\"checkbox\" v-model=\"man\" @change=\"toggleFilter('man', man)\" /> Man</label>\n                        <label><input type=\"checkbox\" v-model=\"analog\" @change=\"toggleFilter('analog', analog)\" /> Analog</label>\n                        <label><input type=\"checkbox\" v-model=\"pins\" @change=\"toggleFilter('pins', pins)\" /> Pins</label>\n                        <label><input type=\"checkbox\" v-model=\"rssi\" @change=\"toggleFilter('rssi', rssi)\" /> RSSI</label>\n                        <label><input type=\"checkbox\" v-model=\"cmd\" @change=\"toggleFilter('cmd', cmd)\" /> CMD</label>\n                        <button class=\"fetch-btn\" @click=\"fetchMetricsManual\">Refresh Metrics</button>\n                    </div>\n                    <div class=\"checkbox-column\">\n                        <label><input type=\"checkbox\" v-model=\"setup\" @change=\"toggleFilter('setup', setup)\" /> Setup</label>\n                        <label><input type=\"checkbox\" v-model=\"confirm\" @change=\"toggleFilter('confirm', confirm)\" /> Confirm</label>\n                        <label><input type=\"checkbox\" v-model=\"saved\" @change=\"toggleFilter('saved', saved)\" /> Saved</label>\n                        <label><input type=\"checkbox\" v-model=\"rebounce\" @change=\"toggleFilter('rebounce', rebounce)\" /> Rebounce</label>\n                        <label><input type=\"checkbox\" v-model=\"boot\" @change=\"toggleFilter('boot', boot)\" /> BOOT</label>\n                        <label><input type=\"checkbox\" v-model=\"non_act\" @change=\"toggleFilter('non_act', non_act)\" /> Non ACT</label>\n                    </div>\n                </div>\n                <div class=\"metrics-header\">Server Health Metrics</div>\n                <div class=\"metrics-item\">Uptime: {{ metrics.uptime }}s</div>\n                <div class=\"metrics-item\">Primary Buffer: {{ metrics.primaryBufferCount }} / {{ metrics.bufferMax }}</div>\n                <div class=\"metrics-item\">Secondary Buffer: {{ metrics.secondaryBufferCount }} / {{ metrics.bufferMax }}</div>\n                <div class=\"metrics-item\">Publish Buffer: {{ metrics.publishBufferCount }} / {{ metrics.bufferMax }}</div>\n            </div>\n            <div v-if=\"showPackets\" class=\"packets-container\">\n                <div class=\"metrics-header\">Packet Data</div>\n                <div class=\"metrics-item\">Total Packets: {{ metrics.totalPackets }}</div>\n                <div class=\"metrics-item\">Unit Bad Packets: {{ metrics.unitBadPackets }}</div>\n                <div class=\"metrics-item\">Gene Bad Packets: {{ metrics.geneBadPackets }}</div>\n                <div class=\"metrics-item\">WiFi Strength: {{ metrics.wifiStrength }} dBm</div>\n                <div class=\"metrics-item\">LoRa Status: {{ metrics.loraStatus }}</div>\n            </div>\n            <div v-if=\"showStations\" class=\"labels-container\">\n                <div class=\"label-header\">Last Seen</div>\n                <div v-for=\"(label, index) in labels\" :key=\"index\" :class=\"{'label-old': isOld(label.lastUpdate)}\" class=\"label-item\">\n                    <span class=\"label-name\">{{ label.name }}</span>\n                    <span class=\"label-time\">{{ label.lastUpdate }}</span>\n                </div>\n            </div>\n        </div>\n        <div v-if=\"showPackets\" class=\"list-box\" v-html=\"displayData\"></div>\n    </div>\n</div>\n\n<style>\n    .main-container {\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        align-self: start; /* Prevent stretching to fill grid cell */\n    }\n    .control-container {\n        padding: 10px;\n        background: #333;\n        border-radius: 15px;\n        box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.8), inset -5px -5px 15px rgba(255, 255, 255, 0.1);\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n        align-items: center;\n        margin-bottom: 10px;\n    }\n    .label-title {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    select {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 8px;\n        padding: 5px;\n        font-size: 14px;\n        width: 150px;\n    }\n    .checkbox-container {\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n    }\n    .checkbox-container label {\n        color: #fff;\n        font-size: 14px;\n        display: flex;\n        align-items: center;\n    }\n    .checkbox-container input[type=\"checkbox\"] {\n        margin-right: 5px;\n        accent-color: #2a2a2a;\n    }\n    .refresh-btn {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 22px;\n        padding: 5px 15px;\n        font-size: 14px;\n        cursor: pointer;\n        box-shadow: -2px -2px 5px rgba(255, 255, 255, 0.1), 2px 2px 5px rgba(0, 0, 0, 0.7);\n        margin-left: auto;\n    }\n    .refresh-btn:active {\n        transform: translateY(2px);\n    }\n    .fetch-btn {\n        background: #2a2a2a;\n        color: #fff;\n        border: none;\n        border-radius: 8px;\n        padding: 5px 10px;\n        font-size: 14px;\n        cursor: pointer;\n        box-shadow: -2px -2px 5px rgba(255, 255, 255, 0.1), 2px 2px 5px rgba(0, 0, 0, 0.7);\n        margin-top: 5px;\n        text-align: center;\n    }\n    .fetch-btn:active {\n        transform: translateY(2px);\n    }\n    .filter-container {\n        display: flex;\n        flex-direction: row;\n        gap: 10px;\n        background: #333;\n        padding: 10px;\n        border-radius: 15px;\n        box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.8), inset -5px -5px 15px rgba(255, 255, 255, 0.1);\n    }\n    .toggle-container {\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        width: 50%;\n    }\n    .checkbox-columns {\n        display: flex;\n        flex-direction: row;\n        gap: 15px;\n    }\n    .checkbox-column {\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n        width: 50%;\n    }\n    .checkbox-column label {\n        color: #fff;\n        font-size: 14px;\n    }\n    .checkbox-column input[type=\"checkbox\"] {\n        margin-right: 5px;\n        accent-color: #2a2a2a;\n    }\n    .metrics-container, .packets-container, .labels-container {\n        padding: 5px;\n        background: #3a3a3a;\n        border-radius: 8px;\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n    }\n    .metrics-header {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    .metrics-item {\n        color: #fff;\n        font-size: 14px;\n    }\n    .label-header {\n        color: #fff;\n        font-size: 14px;\n        font-weight: bold;\n    }\n    .label-item {\n        display: flex;\n        justify-content: space-between;\n        font-size: 14px;\n    }\n    .label-name, .label-time {\n        color: #fff;\n    }\n    .label-old .label-name, .label-old .label-time {\n        color: #ff9900;\n    }\n    .list-box {\n        background: #2a2a2a;\n        border-radius: 8px;\n        padding: 10px;\n        width: 50%;\n        overflow-y: auto;\n        box-shadow: inset 2px 2px 5px rgba(0, 0, 0, 0.5), inset -2px -2px 5px rgba(255, 255, 255, 0.05);\n        font-size: 14px;\n        font-weight: bold;\n        color: #fff;\n        text-align: left;\n    }\n    .list-box ul {\n        list-style-type: none;\n        padding: 0;\n        margin: 0;\n    }\n    .list-box li {\n        padding: 5px 0;\n    }\n    .list-box li li {\n        padding-left: 20px;\n        color: #e6e600;\n    }\n</style>\n\n<script>\nexport default {\n    data() {\n        return {\n            selectedUnit: 'See All',\n            unitOptions: [{'label': 'See All', 'value': 'See All'}],\n            showMetrics: false,\n            showPackets: false,\n            showStations: false,\n            man: false,\n            analog: false,\n            pins: false,\n            rssi: false,\n            cmd: false,\n            setup: false,\n            confirm: false,\n            saved: false,\n            rebounce: false,\n            boot: false,\n            non_act: false,\n            displayData: 'No data yet',\n            labels: [],\n            metrics: {\n                uptime: 0,\n                primaryBufferCount: 0,\n                secondaryBufferCount: 0,\n                publishBufferCount: 0,\n                bufferMax: 75,\n                totalPackets: 0,\n                unitBadPackets: 0,\n                geneBadPackets: 0,\n                wifiStrength: 0,\n                loraStatus: 'Unknown'\n            }\n        }\n    },\n    watch: {\n        msg: {\n            handler(newMsg) {\n                if (newMsg && newMsg.topic && newMsg.payload !== undefined) {\n                    switch (newMsg.topic) {\n                        case 'dropload':\n                            if (Array.isArray(newMsg.payload)) {\n                                this.unitOptions = newMsg.payload;\n                                if (!this.unitOptions.some(opt => opt.value === this.selectedUnit)) {\n                                    this.selectedUnit = 'See All';\n                                }\n                            }\n                            break;\n                        case 'man':\n                            this.man = newMsg.payload;\n                            break;\n                        case 'analog':\n                            this.analog = newMsg.payload;\n                            break;\n                        case 'pins':\n                            this.pins = newMsg.payload;\n                            break;\n                        case 'rssi':\n                            this.rssi = newMsg.payload;\n                            break;\n                        case 'cmd':\n                            this.cmd = newMsg.payload;\n                            break;\n                        case 'setup':\n                            this.setup = newMsg.payload;\n                            break;\n                        case 'confirm':\n                            this.confirm = newMsg.payload;\n                            break;\n                        case 'saved':\n                            this.saved = newMsg.payload;\n                            break;\n                        case 'rebounce':\n                            this.rebounce = newMsg.payload;\n                            break;\n                        case 'boot':\n                            this.boot = newMsg.payload;\n                            break;\n                        case 'non_act':\n                            this.non_act = newMsg.payload;\n                            break;\n                        case 'fetch':\n                            this.updateMetrics(newMsg.payload);\n                            break;\n                        case 'metrics':\n                            if (typeof newMsg.payload === 'boolean') {\n                                this.showMetrics = newMsg.payload;\n                            }\n                            break;\n                        case 'packets':\n                            this.showPackets = newMsg.payload;\n                            break;\n                        case 'stations':\n                            this.showStations = newMsg.payload;\n                            break;\n                        case 'listload':\n                            this.displayData = newMsg.payload;\n                            break;\n                        case 'labelsload':\n                            if (Array.isArray(newMsg.payload)) {\n                                this.labels = newMsg.payload;\n                                this.showStations = this.labels.some(label => this.isOld(label.lastUpdate)) || this.showStations;\n                            }\n                            break;\n                    }\n                }\n            },\n            deep: true\n        }\n    },\n    methods: {\n        updateUnit() {\n            this.send({ payload: this.selectedUnit, topic: 'unit_select' });\n        },\n        refreshData() {\n            this.send({ payload: 'refresh', topic: 'refresh' });\n        },\n        toggleFilter(topic, value) {\n            this.send({ payload: value, topic: topic });\n        },\n        fetchMetricsManual() {\n            this.send({ payload: 'metrics', topic: 'fetch' });\n        },\n        isOld(lastUpdate) {\n            if (!lastUpdate) return false;\n            const now = new Date();\n            const last = new Date(lastUpdate.replace(/(\\d{2})\\/(\\d{2}) : (\\d{2}):(\\d{2})/, '2025-$1-$2T$3:$4:00'));\n            const diffMs = now - last;\n            return diffMs > 60 * 60 * 1000;\n        },\n        updateMetrics(payload) {\n            if (typeof payload === 'string') {\n                const lines = payload.split('\\n').map(line => line.trim());\n                lines.forEach(line => {\n                    if (line.startsWith('Uptime')) this.metrics.uptime = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Primary Buffer')) {\n                        const [count, max] = line.split(': ')[1].split(' / ');\n                        this.metrics.primaryBufferCount = parseInt(count) || 0;\n                        this.metrics.bufferMax = parseInt(max) || 75;\n                    }\n                    else if (line.startsWith('Secondary Buffer')) {\n                        const [count] = line.split(': ')[1].split(' / ');\n                        this.metrics.secondaryBufferCount = parseInt(count) || 0;\n                    }\n                    else if (line.startsWith('Publish Buffer')) {\n                        const [count] = line.split(': ')[1].split(' / ');\n                        this.metrics.publishBufferCount = parseInt(count) || 0;\n                    }\n                    else if (line.startsWith('Total Packets')) this.metrics.totalPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Unit Bad Packets')) this.metrics.unitBadPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('Gene Bad Packets')) this.metrics.geneBadPackets = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('WiFi Strength')) this.metrics.wifiStrength = parseInt(line.split(': ')[1]) || 0;\n                    else if (line.startsWith('LoRa Status')) this.metrics.loraStatus = line.split(': ')[1] || 'Unknown';\n                });\n            }\n        }\n    },\n    mounted() {\n        console.log('LyreBird Filter Control mounted');\n    }\n}\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "c222d73b24b687d1",
        "type": "ui-group",
        "name": "Tower View Group",
        "page": "0ddda030cbb23d9d",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0ba568e314e2ccc8",
        "type": "ui-group",
        "name": "tower",
        "page": "c999cabecc400420",
        "width": "3",
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0ddda030cbb23d9d",
        "type": "ui-page",
        "name": "Tower View",
        "ui": "63a6fe8b81a0788f",
        "path": "/page40",
        "icon": "home",
        "layout": "grid",
        "theme": "4d2ac0a3dd6b4167",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c999cabecc400420",
        "type": "ui-page",
        "name": "abcc",
        "ui": "63a6fe8b81a0788f",
        "path": "/page36",
        "icon": "home",
        "layout": "grid",
        "theme": "d6774f59bbb694fb",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "63a6fe8b81a0788f",
        "type": "ui-base",
        "name": "Menu",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true
    },
    {
        "id": "4d2ac0a3dd6b4167",
        "type": "ui-theme",
        "name": "Theme 2",
        "colors": {
            "surface": "#bfbfbf",
            "primary": "#0094ce",
            "bgPage": "#868686",
            "groupBg": "#7d7d7d",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "d6774f59bbb694fb",
        "type": "ui-theme",
        "name": "Theme 2",
        "colors": {
            "surface": "#bfbfbf",
            "primary": "#0094ce",
            "bgPage": "#868686",
            "groupBg": "#7d7d7d",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]